-----------------------------------------------------------------
Experiment X: P4 Trial Run With Large Windows and No Pre-Training

    Objectives:

        To verify whether the P4-based and the emulation-based EE and TCAD are consistent.  
        To gain insight into what is needed to implement pre-training.

    Parameters:

                            Emulation   P4               
        Window Size:        m=2^18      m=2^18
        Training:           250 OWs     2 OWs
        Attack:             125 OWs     8 OWs  

        ddos5x.json: 
            "window_size": 262144

        tcad.cpp command-line parameters:
            -t 250
            -s 0.078125
            -k 3.5  

        control_rules.txt:
            register_write ingress.log2_m 0 18
            register_write ingress.training_len 0 250
            register_write ingress.alpha 0 20
            register_write ingress.k 0 28


    Datasets: 

        Emulation:

            Lapolli's ddos5.pcap

        P4:

            We know that the attack begins at t=376 (t[a]). Therefore, we will use: 

            OWs 374-375: Volume 11, last 512k = 524288 packets. 
            OWs 376-383: Volume 12, first 2^3*2^18 = 2^21 = 2048k = 2097152 packets

            editcap -r ddos5_00011.pcap ddos5_00011x.pcap 7667713-8192000
            editcap -r ddos5_00012.pcap ddos5_00012x.pcap 1-2097152
            mergecap -a -w ddos5x.pcap ddos5_00011x.pcap ddos5_00012x.pcap 

    Procedure: 

        a) Obtain t=373 (t[a] - 3) MAs and MMDs.

            Obtain a TCAD trace. See line #373. 

            ./ddosd-cpp/bin/ee -c ./ddosd-p4/scripts/ddos5x.json ./ddos/datasets/aclapolli/synthetic/ddos5.pcap \
                                | ./ddosd-cpp/bin/tcad -t 250 -s 0.078125 -k 3.5 | tee ddos5x.tcad.txt

            Phase                           Time	            SrcEnt	    SrcMA   SrcMD   DstEnt	    DstMA	DstMD	Alarm
            After trainining (t=250)        1459947840087230	   186    3056132    9672	   183    3000850    8007	    0
            Before detection 1 (t=373)      1459947871374546       187    3061128    7674      184    3009287   10323       0
            After detection 1 (t=375)       1459947871852540	   186	  3059070	 8339	   183	  3007632	10234	    0

        b) Initialize the P4 pipeline with t=373 (t[a] - 3) MAs and MMDs. 

            register_write src_ewma 0 3061128
            register_write src_ewmmd 0 7674
            register_write dst_ewma 0 3009287
            register_write dst_ewmmd 0 10323

        c) Replay windows 374 (t[a]- 2) to 383 (t[a] + 7) to verify estimation and detection properties. 
        
    Notes

            If TCAD is working properly:
                at t=376 (t[a]), DEFCON will be set to 1;
                at t=377 (t[a]+1), packet diversion will begin. 

    Observations

            The P4-based and the emulation-based entropy estimations were equivalent.  
            The accuracy of the P4 attack detection mechanism has been considerably reduced.
                Cause: most likely, the ommission of the first 248 training windows.
                Consequence: we cannot rely on this experiment to verify the proper operation of P4-based tcad.
            Pre-training requires changes in the P4 code:
                Originally, in the first OW, we initialize the MAs and MMDs. 
                To use pre-training, we must skip this step. 
            * Implementation Ideas: 
                Use a register to conditionally enable/disable training; use control_rules.txt to set the value of such register. 


    Tools

        TCAD.xlsm, a spreadsheet with VBA functions to convert TCAD traces to human-readable values. 
        Sniff.py, a Scapy-based packet sniffer which can parse signaling packets and convert these to human-readable values.  

------------------------------------------------------------------------------------
Experiment Y: P4 Trial Run With 1024-Packet Windows Without [then With] Pre-Training

    Objectives:
        To verify whether the P4-based and the emulation-based EE and TCAD are consistent.  
        To gain further insight about what is needed to implement pre-training.
        To create and assess a prototype implementation of pre-training.              

    Parameters:

                            Emulation           P4               
        Window Size:         m=2^10       m=2^10
        Training Length:    512 OWs        2 OWs
        Attack Length:     2048 OWs     2048 OWs  

        Training lengths: 
            512 OWs to obtain MAs and MMDs for pre-training. 
                2 OWs to assess pre-training. 

    Dataset: 

        OWs 1-512:      Volume 11, last 2^9*2^10 = 2^19 = 512k packets.
        OWs 511-512:    Volume 11, last 2048 packets. 
        OWs 513-2560:   Volume 12, first 2^11*2^10 = 2^21 = 2048k packets

        DS Generation (values in brackets: numbers of packets): 

            editcap -r ddos5_00011.pcap ddos5_00011y0.pcap 7667713-8192000   [512k]
            editcap -r ddos5_00011.pcap ddos5_00011y1.pcap 8189953-8192000   [2k]
            editcap -r ddos5_00012.pcap ddos5_00012y.pcap 1-2097152          [2048k]
            mergecap -a -w ddos5y0.pcap ddos5_00011y0.pcap ddos5_00012y.pcap [2560k]
            mergecap -a -w ddos5y1.pcap ddos5_00011y1.pcap ddos5_00012y.pcap [2050k]

            Files saved in D:\Downloads\P4\ddos\datasets\xyz 

    Procedure

        a) Obtain t=510 (t[a]-3) MAs and MMDs.

            Obtain a TCAD trace. See lines #510-516.

            ./ddosd-cpp/bin/ee -c ./ddosd-p4/scripts/ddos5y.json ./ddos/datasets/xyz/ddos5y0.pcap \
                                | ./ddosd-cpp/bin/tcad -t 512 -s 0.078125 -k 3.5 | tee ddos5y.tcad.txt

            1459947871850801 123 1987206 49782 122 1946008 59783 0      // 510 - initialize with these. 
            1459947871851689 122 1988115 46730 119 1946296 55377 0      // 511 - start replaying here. 
            1459947871852545 117 1982553 48205 115 1941441 55525 0      // 512
            1459947871853365 118 1978706 47984 112 1933125 58852 0      // 513 - t[a] - attack begins here. 
            1459947871854242 126 1985399 50405 120 1935699 56627 0      // 514
            1459947871855084 125 1990289 50975 119 1936792 53211 0      // 515
            1459947871856001 125 1994797 51148 119 1937800 49982 0      // 516

            Excel: 

            2016/04/06 13:04:32	7,688	7,581	0,190		7,625	7,423	0,228   // 510 
            2016/04/06 13:04:32	7,625	7,584	0,178		7,438	7,425	0,211   // 511  
            2016/04/06 13:04:32	7,313	7,563	0,184		7,188	7,406	0,212   // 512
            2016/04/06 13:04:32	7,375	7,548	0,183		7,000	7,374	0,225   // 513
            2016/04/06 13:04:32	7,875	7,574	0,192		7,500	7,384	0,216   // 514
            2016/04/06 13:04:32	7,813	7,592	0,194		7,438	7,388	0,203   // 515
            2016/04/06 13:04:32	7,813	7,610	0,195		7,438	7,392	0,191   // 516

        b) Initialize with t=510 (t[a]-3) values. 

            register_write src_ewma 0 1987206
            register_write src_ewmmd 0 49782
            register_write dst_ewma 0 1946008
            register_write dst_ewmmd 0 59783

        c) Replay windows 511-END to check whether TCAD still works. 

            | Src H=7.625 A=7.584 MD=0.178 | Dst H=7.438 A=7.425 MD=0.211 | Alarm=0 Defcon=0 |  // 511
            | Src H=7.312 A=7.563 MD=0.184 | Dst H=7.188 A=7.406 MD=0.212 | Alarm=0 Defcon=0 |  // 512
            | Src H=7.375 A=7.548 MD=0.183 | Dst H=7.000 A=7.374 MD=0.225 | Alarm=0 Defcon=0 |  // 513
            | Src H=7.875 A=7.574 MD=0.192 | Dst H=7.500 A=7.384 MD=0.216 | Alarm=0 Defcon=0 |  // 514
            | Src H=7.812 A=7.592 MD=0.194 | Dst H=7.438 A=7.388 MD=0.203 | Alarm=0 Defcon=0 |  // 515
            | Src H=7.812 A=7.610 MD=0.195 | Dst H=7.438 A=7.392 MD=0.191 | Alarm=0 Defcon=0 |  // 516
        
    Observations
        
        2019/07/29 13:45 
        P4-based and emulation-based Entropy and TCAD values are equivalent! So far, so good!
        However, TCAD accuracy was TERRIBLE. 
            We will attempt to improve it by using 2k-sized windows. 
            We will reuse our workload, whose beginning contains exactly 2k non-malicious packets. 

------------------------------------------------------------------------------------
Experiment Z: P4 Trial Run With 2048-Packet Windows Without [then With] Pre-Training

    Objective:
        To obtain higher TCAD accuracy, as compared to Experiment Y results. 

    Parameters:

                            Emulation           P4               
        Window Size:         m=2^11       m=2^11
        Training Length:    256 OWs        1 OWs
        Attack Length:     1024 OWs     1024 OWs  

        Training lengths: 
            256 OWs to obtain MAs and MMDs for pre-training. 
                1 OWs to assess pre-training. 


    Dataset: 

        OWs 1-256:      Volume 11, last 512k packets.
        OWs 256:        Volume 11, last 2048 packets. 
        OWs 257-1280:   Volume 12, first 2^11*2^10 = 2^21 = 2048k packets

        DS Generation: 

        We will reuse the workload from Experiment Y. 

        DS Generation (values in brackets: numbers of packets): 

            editcap -r ddos5_00011.pcap ddos5_00011y0.pcap 7667713-8192000   [512k]
            editcap -r ddos5_00011.pcap ddos5_00011y1.pcap 8189953-8192000   [2k]
            editcap -r ddos5_00012.pcap ddos5_00012y.pcap 1-2097152          [2048k]
            mergecap -a -w ddos5y0.pcap ddos5_00011y0.pcap ddos5_00012y.pcap [2560k]
            mergecap -a -w ddos5y1.pcap ddos5_00011y1.pcap ddos5_00012y.pcap [2050k]

            Files saved in D:\Downloads\P4\ddos\datasets\xyz             

    Procedure: 

        a) Obtain t=255 (t[a]-2) MAs and MMDs.

            Obtain a TCAD trace. See lines #255-259.

            ./ddosd-cpp/bin/ee -c ./ddosd-p4/scripts/ddos5z.json ./ddos/datasets/xyz/ddos5y0.pcap \
                                | ./ddosd-cpp/bin/tcad -t 256 -s 0.078125 -k 1.75 | tee ddos5z.tcad.txt

            1459947871850801	129	2167114	42243	127	2120406	43866	0               // 255
            1459947871852545	129	2162928	42800	127	2117309	43292	0               // 256
            1459947871854242	133	2164189	40618	127	2114454	42540	0
            1459947871856001	135	2167911	40875	128	2113102	40462	0
            1459947871857807	136	2172622	42024	126	2109295	40808	0

            Excel: 

            255	2016/04/06 13:04:32	8,063	8,267	0,161	7,938	8,089	0,167       // 255
            256	2016/04/06 13:04:32	8,063	8,251	0,163	7,938	8,077	0,165       // 256
            257	2016/04/06 13:04:32	8,313	8,256	0,155	7,938	8,066	0,162
            258	2016/04/06 13:04:32	8,438	8,270	0,156	8,000	8,061	0,154
            259	2016/04/06 13:04:32	8,500	8,288	0,160	7,875	8,046	0,156

        b) Initialize with t=255 (t[a]-1) values. 

            register_write src_ewma 0 2167114
            register_write src_ewmmd 0 42243
            register_write dst_ewma 0 2120406
            register_write dst_ewmmd 0 43866  

        c) Replay windows 256-END to check whether TCAD still works. 

            | Src H=8.062 A=8.251 MD=0.163 | Dst H=7.938 A=8.077 MD=0.165 | Alarm=0 Defcon=0 |  // 256
            | Src H=8.312 A=8.256 MD=0.155 | Dst H=7.938 A=8.066 MD=0.162 | Alarm=0 Defcon=0 |
            | Src H=8.438 A=8.270 MD=0.156 | Dst H=8.000 A=8.061 MD=0.154 | Alarm=0 Defcon=0 |
            | Src H=8.500 A=8.288 MD=0.160 | Dst H=7.875 A=8.046 MD=0.156 | Alarm=0 Defcon=0 |
            | Src H=8.750 A=8.288 MD=0.160 | Dst H=8.250 A=8.046 MD=0.156 | Alarm=1 Defcon=1 |

    Observations

            Tuning _seems_ OK.
            However, we had to _half_ the value of the sensitivity coefficient to ensure DDoS attack detection.
                This is an extreme measure which we will have to revisit. 
                Next steps:
                    Increase the sensitivity coefficient. 
                    Increase the count sketch width.